[{"/home/jenius/qrform/src/index.js":"1","/home/jenius/qrform/src/App.js":"2","/home/jenius/qrform/src/reportWebVitals.js":"3","/home/jenius/qrform/src/Generator.js":"4","/home/jenius/qrform/src/components/ReactQRScanner/ReactQRScanner.js":"5","/home/jenius/qrform/src/components/ReactQRGenerator/ReactQRGenerator.js":"6","/home/jenius/qrform/src/Scanner.js":"7","/home/jenius/qrform/src/ReportForm.js":"8","/home/jenius/qrform/src/components/ReportFormComponent/ReportFormComponent.js":"9","/home/jenius/qrform/src/Navigation.js":"10","/home/jenius/qrform/src/CardsContainer.js":"11","/home/jenius/qrform/src/components/Cards/Cards.js":"12"},{"size":502,"mtime":1610546580102,"results":"13","hashOfConfig":"14"},{"size":1179,"mtime":1610607038198,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1610197831474,"results":"16","hashOfConfig":"14"},{"size":316,"mtime":1610591425392,"results":"17","hashOfConfig":"14"},{"size":3055,"mtime":1610590474836,"results":"18","hashOfConfig":"14"},{"size":706,"mtime":1610591193375,"results":"19","hashOfConfig":"14"},{"size":394,"mtime":1610590218157,"results":"20","hashOfConfig":"14"},{"size":218,"mtime":1610550687667,"results":"21","hashOfConfig":"14"},{"size":5488,"mtime":1610610404792,"results":"22","hashOfConfig":"14"},{"size":2178,"mtime":1610618968130,"results":"23","hashOfConfig":"14"},{"size":198,"mtime":1610606943535,"results":"24","hashOfConfig":"14"},{"size":148,"mtime":1610607047649,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"o5huvq",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/home/jenius/qrform/src/index.js",[],["55","56"],"/home/jenius/qrform/src/App.js",[],"/home/jenius/qrform/src/reportWebVitals.js",[],"/home/jenius/qrform/src/Generator.js",[],"/home/jenius/qrform/src/components/ReactQRScanner/ReactQRScanner.js",[],"/home/jenius/qrform/src/components/ReactQRGenerator/ReactQRGenerator.js",["57","58","59","60"],"import React, { useState, useEffect } from 'react';\nimport QRCode from 'qrcode.react';\nimport { v4 as uuidv4 } from 'uuid'; \n\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport DropdownButton from 'react-bootstrap/DropdownButton'\n\n\n\n\nfunction ReactQRMaker() {\n    // component, faults, and id are going to be passed into the object\n    const testObject = {\n        id: uuidv4(),\n        component: \"PlayStation\",\n        system: \"S1\"\n    }\n    const testObjectJSON = JSON.stringify(testObject)\n\n    \n    return(\n        <div className=\"generator\">\n            <QRCode \n                value={testObjectJSON}\n                size={256}\n            />\n        </div>\n    )\n}\n\nexport default ReactQRMaker;",["61","62"],"/home/jenius/qrform/src/Scanner.js",[],"/home/jenius/qrform/src/ReportForm.js",[],"/home/jenius/qrform/src/components/ReportFormComponent/ReportFormComponent.js",["63","64","65","66"],"import React, { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid'; \nimport './ReportFormComponent.css'\nimport Form from 'react-bootstrap/Form'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button';\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport Container from 'react-bootstrap/Container'\nimport Card from 'react-bootstrap/Card'\n\nfunction ReportFormComponent() {\n\n    const [component, setComponent] = useState(\"\")\n    const handleComponent = (event) => {\n        setComponent(event.target.value)\n        console.log(\"From handleComponent \", component)\n    }\n\n    const [fault, setFault] = useState(\"\")\n    const handleFault = (event) => {\n        setFault(event.target.value)\n        console.log(\"From handleFault \", fault)\n    }\n\n    const [system, setSystem] = useState(\"\")\n    const handleSystem = (event) => {\n        setSystem(event.target.value)\n        console.log(\"From handleSystem \", system)\n    }\n\n    // pass into dependency array each input's state\n\n    // initialise report state\n    const [report, setReport] = useState(\n        {\n            component: \"\",\n            system: \"\",\n            fault: \"\"\n        }\n    ); \n\n    \n    const handleSubmitReport= (event) => {\n        event.preventDefault();\n        console.log(report.component, report.system, report.fault)\n    }\n\n    // set dependency array as component, system, fault, so if any of these state changes\n    // set report as text that user has entered\n    // previously I used setReport inside handleSubmitReport\n    // this resulted in old state being submitted on the first submit\n    // only on the second submit will then the correct state be submitted\n    // then I read from documentation:\n    // \n    useEffect(() => {\n        setReport(\n            {\n                component: component,\n                system: system,\n                fault: fault\n            }\n        );\n    }, [component, system, fault])\n\n    // I should hardcode the components in a tree view in the future\n    /* for now I should use a Bootstrap Form combined with the buttons etc. */\n    return(\n        /* className='mt-3' means that margin-top size of to $spacer */\n        /* see https://getbootstrap.com/docs/4.0/utilities/spacing/ */\n        <Container>\n            {/* for input type text, value is the initial value of the input */}\n            {/* <form onSubmit={handleSubmitReport}>\n                <DropdownButton id=\"dropdown-item-button\" title=\"Select System\">\n                    <Dropdown.ItemText>Select system</Dropdown.ItemText>\n                    {\n                        [1, 2, 3, 4].map(element => {\n                            return  <Dropdown.Item eventKey={`${element}`}>System{element}</Dropdown.Item>\n                        })\n                    }\n                </DropdownButton>\n                <label>\n                    What component is it?\n                    <input type=\"text\" value={component} onChange={handleComponent}/>\n                </label>\n                <label>\n                    Please describe the fault.\n                    <textarea value={fault} onChange={handleFault}/>\n                </label>\n                <Button type=\"submit\"></Button>\n            </form> */}\n            <Form onSubmit={handleSubmitReport}>\n                <Form.Group as={Row} controlId=\"formHorizontalText\" className='mt-3'>\n                    <Form.Label column sm={2}>\n                    Component\n                    </Form.Label>\n                    <Col sm={10}>\n                        <Form.Control \n                            type=\"text\" \n                            placeholder=\"Enter Component\" \n                            value={component} \n                            onChange={handleComponent}\n                        />\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row} controlId=\"formHorizontalTextArea\" className='mt-3'>\n                    <Form.Label column sm={2}>\n                    Fault\n                    </Form.Label>\n                    <Col sm={10}>\n                        <Form.Control \n                            as=\"textarea\" \n                            placeholder=\"Fault Description\" \n                            value={fault} \n                            onChange={handleFault}\n                        />\n                    </Col>\n                </Form.Group>\n                <Form.Group as={Row} className='mt-3'>\n                    <Form.Label column sm={2}>\n                        System\n                    </Form.Label>\n                    <Col sm={10}>\n                        <Form.Control \n                            as=\"select\" \n                            onChange={handleSystem} \n                            defaultValue=\"Choose...\"\n                        >\n                            <option>Choose...</option>\n                            {\n                                [1, 2, 3, 4].map(element => {\n                                    return <option eventKey={element} value={`System ${element}`}>System {element}</option>\n                                })\n                            }\n                        </Form.Control>\n                    </Col>\n                </Form.Group>\n                <Button type=\"submit\">Submit!</Button>\n            </Form>\n        </Container>\n    )\n}\n\nexport default ReportFormComponent;","/home/jenius/qrform/src/Navigation.js",["67","68"],"import React from 'react';\nimport './Navigation.css';\nimport { Link } from 'react-router-dom';\nimport { FaQrcode } from 'react-icons/fa'\nimport { RiQrScan2Line } from 'react-icons/ri'\nimport { AiOutlineForm } from \"react-icons/ai\";\nimport { HiTemplate } from \"react-icons/hi\";\nimport { IconContext } from \"react-icons\";\nimport Navbar from 'react-bootstrap/Navbar'\n/* take note might clash with Navigation.css, because bootstrap.min.css is in App.css but here\nthere is Navigation.css also \n. Add the navigation bar in the future*/\n\n/* import { IconContext } from \"react-icons\"; */ \n/* import IconContext if need to pass down props to it e.g. \n  size={props.size}\n*/\n/* need to add active classes for the buttons, so whenever a Link is clicked, the CSS is 'active', the other\nlinks are shown as gray color etc. */\n\nfunction Navigation() {\n  /* inline styles are used because the <Link> is wrapping the <li> */\n  const navStyle = {\n    color: 'white',\n    textDecoration: 'none'\n  }\n\n  // refactor the icons in the future into list?\n  // the vertical align does not seem to be working, maybe is the li?\n  const icons = [<FaQrcode size=\"1.5em\" />, <RiQrScan2Line size=\"1.7em\" />, <AiOutlineForm size=\"1.7em\" />]\n    return (\n      <>\n        <IconContext.Provider value={{ style: { verticalAlign: 'middle' } }}>\n        <nav>\n            <h3 className=\"logo\">{\"<JENIUS />\"}</h3>\n            <ul className=\"nav-links\">\n              <Link style={navStyle} to=\"/scanner\"> \n                <li>\n                  <FaQrcode size=\"1.5em\" />\n                </li>\n              </Link>\n              <Link style={navStyle} to=\"/generator\">\n                <li>\n                  <RiQrScan2Line size=\"1.7em\" />\n                </li>\n              </Link>\n              <Link style={navStyle} to=\"/form\">\n                <li>\n                  <AiOutlineForm size=\"1.7em\" />\n                </li>\n              </Link>\n              <Link style={navStyle} to=\"/form\">\n                <li>\n                  <HiTemplate size=\"1.7em\" />\n                </li>\n              </Link>\n            </ul>\n        </nav>\n        </IconContext.Provider>\n      </>\n    );\n}\n\nexport default Navigation;","/home/jenius/qrform/src/CardsContainer.js",[],"/home/jenius/qrform/src/components/Cards/Cards.js",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":1,"column":17,"nodeType":"75","messageId":"76","endLine":1,"endColumn":25},{"ruleId":"73","severity":1,"message":"77","line":1,"column":27,"nodeType":"75","messageId":"76","endLine":1,"endColumn":36},{"ruleId":"73","severity":1,"message":"78","line":5,"column":8,"nodeType":"75","messageId":"76","endLine":5,"endColumn":16},{"ruleId":"73","severity":1,"message":"79","line":6,"column":8,"nodeType":"75","messageId":"76","endLine":6,"endColumn":22},{"ruleId":"69","replacedBy":"80"},{"ruleId":"71","replacedBy":"81"},{"ruleId":"73","severity":1,"message":"82","line":2,"column":16,"nodeType":"75","messageId":"76","endLine":2,"endColumn":22},{"ruleId":"73","severity":1,"message":"78","line":8,"column":8,"nodeType":"75","messageId":"76","endLine":8,"endColumn":16},{"ruleId":"73","severity":1,"message":"79","line":9,"column":8,"nodeType":"75","messageId":"76","endLine":9,"endColumn":22},{"ruleId":"73","severity":1,"message":"83","line":11,"column":8,"nodeType":"75","messageId":"76","endLine":11,"endColumn":12},{"ruleId":"73","severity":1,"message":"84","line":9,"column":8,"nodeType":"75","messageId":"76","endLine":9,"endColumn":14},{"ruleId":"73","severity":1,"message":"85","line":30,"column":9,"nodeType":"75","messageId":"76","endLine":30,"endColumn":14},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Dropdown' is defined but never used.","'DropdownButton' is defined but never used.",["86"],["87"],"'uuidv4' is defined but never used.","'Card' is defined but never used.","'Navbar' is defined but never used.","'icons' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]